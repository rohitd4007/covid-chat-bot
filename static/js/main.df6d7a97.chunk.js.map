{"version":3,"sources":["App.js","reportWebVitals.js","Components/ChatBot.jsx","Helper/loading.gif","index.js"],"names":["App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ChatBot","useState","chat","setChat","currentMessage","setCurrentMessage","response","setResponse","className","map","data","index","console","log","undefined","type","autocomplete","name","placeholder","onChange","e","target","value","onTextChange","onKeyDown","event","message","text","isBot","key","axios","post","catch","err","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAsDeA,IC1CAC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCyGCQ,G,MChHA,IDKC,WACd,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4CF,mBAAS,IAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KACA,EAAgCJ,mBAAS,IAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KA2CA,OACE,qBAAKC,UAAU,aAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,OAAf,UACE,qBAAKA,UAAU,SAAf,SACE,sBAAKA,UAAU,UAAf,UACE,sBAAKA,UAAU,OAAf,UACE,2CACA,6CAEF,qBAAKA,UAAU,eAInB,qBAAKA,UAAU,WAAf,SACGN,EAAKO,KAAI,SAACC,EAAMC,GAAP,OACR,sBAAKH,UAAU,YAAf,UACE,qBAAKA,UAAU,UAAf,SACGE,GAD2BC,GAI9B,sBAAKH,UAAU,aAAf,UACGI,QAAQC,IAAIP,EAASK,SACDG,IAApBR,EAASK,GAOR,sBAAKH,UAAU,UAAf,UACE,2CACA,yBACA,yBACA,4BAGFF,EAASK,cAMnB,sBAAKH,UAAU,SAAf,UACE,uBACEO,KAAK,OACLC,aAAa,MACbC,KAAK,UACLC,YAAY,mBACZC,SAAU,SAACC,GAAD,OArDD,SAACA,GACpBf,EAAkBe,EAAEC,OAAOC,OAoDAC,CAAaH,IAC9BE,MAAOlB,EACPoB,UA5FS,SAACC,GACpB,IAAMC,EAAU,CACdC,KAAMvB,EACNwB,OAAO,GAGS,UAAdH,EAAMI,MACR1B,EAAQ,GAAD,mBAAKD,GAAL,CAAWwB,EAAQC,QAiB1BG,IACGC,KAAK,2CAA6CL,EAAQC,MAC1DjC,MAAK,SAACgB,GACLE,QAAQC,IAAIH,EAAKA,KAAKA,MAEtBH,EAAY,GAAD,mBAAKD,GAAL,CAAeI,EAAKA,KAAKA,WAErCsB,OAAM,SAACC,GAAD,OAASrB,QAAQC,IAAIoB,MAE9B5B,EAAkB,QA6DZ,qBAAKG,UAAU,2BEhG3B0B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1B/C,M","file":"static/js/main.df6d7a97.chunk.js","sourcesContent":["import \"./App.css\";\nimport React, { useState } from \"react\";\nimport First from \"./Components/First\";\n\nfunction App() {\n  const [chat, setChat] = useState([]);\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  const [response, setResponse] = useState([]);\n\n  const handleSubmit = (event) => {\n    const message = {\n      text: currentMessage,\n      isBot: false,\n    };\n\n    if (event.key === \"Enter\") {\n      setChat([...chat, message.text]);\n      if (message.text === \"Hello\") {\n        setResponse([...response, \"hiii\"]);\n      } else {\n        setResponse([...response, \"\"]);\n      }\n      //   console.log(message);\n      setCurrentMessage(\"\");\n    }\n  };\n\n  const onTextChange = (e) => {\n    setCurrentMessage(e.target.value);\n  };\n  const renderChat = () => {\n    return chat.map((data, index) => <div key={index}>{data}</div>);\n  };\n  const getResponse = () => {\n    return response.map((data, index) => <div key={index}>{data}</div>);\n  };\n\n  return (\n    <div>\n      <div className=\"chat\">Message : {renderChat()}</div>\n      <div className=\"chat\">Responssse : {getResponse()}</div>\n      <input\n        type=\"text\"\n        name=\"message\"\n        placeholder=\"Say something...\"\n        onChange={(e) => onTextChange(e)}\n        value={currentMessage}\n        onKeyDown={handleSubmit}\n      />\n      <button type=\"\">Send</button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"./ChatBot.css\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport logo from \"../Helper/loading.gif\";\r\nimport axios from \"axios\";\r\n\r\nconst ChatBot = () => {\r\n  const [chat, setChat] = useState([]);\r\n  const [currentMessage, setCurrentMessage] = useState(\"\");\r\n  const [response, setResponse] = useState([]);\r\n\r\n  const handleSubmit = (event) => {\r\n    const message = {\r\n      text: currentMessage,\r\n      isBot: false,\r\n    };\r\n\r\n    if (event.key === \"Enter\") {\r\n      setChat([...chat, message.text]);\r\n\r\n      // const nnn = async () => {\r\n      //   try {\r\n      //     const data = await axios\r\n      //       .post(\"https://chatbot-flask-api.herokuapp.com/\" + currentMessage)\r\n      //       .then((data) => {\r\n      //         console.log(data.data.data);\r\n      //         setResponse([...response, data.data.data]);\r\n      //       });\r\n      //\r\n      //   } catch (e) {\r\n      //     console.log(e);\r\n      //   }\r\n      // };\r\n      // nnn();\r\n\r\n      axios\r\n        .post(\"https://chatbot-flask-api.herokuapp.com/\" + message.text)\r\n        .then((data) => {\r\n          console.log(data.data.data);\r\n\r\n          setResponse([...response, data.data.data]);\r\n        })\r\n        .catch((err) => console.log(err));\r\n\r\n      setCurrentMessage(\"\");\r\n    }\r\n  };\r\n\r\n  const onTextChange = (e) => {\r\n    setCurrentMessage(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"center-div\">\r\n      <div className=\"container\">\r\n        <div className=\"chat\">\r\n          <div className=\"header\">\r\n            <div className=\"profile\">\r\n              <div className=\"left\">\r\n                <h2>Covid Bot</h2>\r\n                <span>online</span>\r\n              </div>\r\n              <div className=\"right\"></div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"chat-box\">\r\n            {chat.map((data, index) => (\r\n              <div className=\"chat-feed\">\r\n                <div className=\"my-chat\" key={index}>\r\n                  {data}\r\n                </div>\r\n\r\n                <div className=\"their-chat\">\r\n                  {console.log(response[index])}\r\n                  {response[index] === undefined ? (\r\n                    // <img\r\n                    //   // src=\"https://img.icons8.com/office/16/000000/dots-loading--v2.png\"\r\n                    //   src={logo}\r\n                    //   alt=\"Loading ...\"\r\n                    //   className=\"logo\"\r\n                    // />\r\n                    <div className=\"loading\">\r\n                      <label>Typing</label>\r\n                      <span></span>\r\n                      <span></span>\r\n                      <span></span>\r\n                    </div>\r\n                  ) : (\r\n                    response[index]\r\n                  )}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <div className=\"footer\">\r\n            <input\r\n              type=\"text\"\r\n              autocomplete=\"off\"\r\n              name=\"message\"\r\n              placeholder=\"Say something...\"\r\n              onChange={(e) => onTextChange(e)}\r\n              value={currentMessage}\r\n              onKeyDown={handleSubmit}\r\n            />\r\n            <div className=\"attach-cam\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBot;\r\n","export default __webpack_public_path__ + \"static/media/loading.2ed215e5.gif\";","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport ChatBot from \"./Components/ChatBot\";\nimport First from \"./Components/First\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChatBot />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}